% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layer-multi-dense.R
\name{layer_multi_dense}
\alias{layer_multi_dense}
\title{Multiple dense layers in one layer}
\usage{
layer_multi_dense(object, units, new_dim = FALSE, ...)
}
\arguments{
\item{object}{What to compose the new \code{Layer} instance with. Typically a
Sequential model or a Tensor (e.g., as returned by \code{layer_input()}).
The return value depends on \code{object}. If \code{object} is:
\itemize{
\item missing or \code{NULL}, the \code{Layer} instance is returned.
\item a \code{Sequential} model, the model with an additional layer is returned.
\item a Tensor, the output tensor from \code{layer_instance(object)} is returned.
}}

\item{units}{Positive integer, dimensionality of the output space.}
}
\description{
Multiple dense layers in one layer
}
\section{Input and Output Shapes}{


Input shape: nD tensor with shape: \verb{(batch_size, ..., input_dim)}. The most
common situation would be a 2D input with shape \verb{(batch_size, input_dim)}.

Output shape:
\itemize{
\item If length of \code{units} equals 1
nD tensor with shape: \verb{(batch_size, ..., units)}. For
instance, for a 2D input with shape \verb{(batch_size, input_dim)}, the output
would have shape \verb{(batch_size, unit)}.
\item If length of \code{units} is greater than 1
nD tensor with shape: \verb{(batch_size, ..., units)}. For
instance, for a 2D input with shape \verb{(batch_size, input_dim)}, the output
would have shape \verb{(batch_size, unit)}.
}
}

\examples{

# ==========================================================================
#                          SIMPLE CONCATENATION
# ==========================================================================

inp <- layer_input(c(28, 3))
md <- layer_multi_dense(units = c(4, 6, 8))(inp)

md_model <- keras_model(inp, md)

dummy_input <- array(1, dim = c(1, 28, 3))

out <- md_model(dummy_input)
dim(out)

# ==========================================================================
#                          NEW DIMESNION
# ==========================================================================

inp <- layer_input(c(28, 3))
md <- layer_multi_dense(units = 5, new_dim = TRUE)(inp)

md_model <- keras_model(inp, md)

dummy_input <- array(1, dim = c(1, 28, 3))

out <- md_model(dummy_input)
dim(out)
}
