% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/glu.R
\name{layer_glu}
\alias{layer_glu}
\title{Gated Linear Unit}
\usage{
layer_glu(
  object,
  units,
  activation = NULL,
  dropout_rate = NULL,
  return_gate = FALSE,
  ...
)
}
\arguments{
\item{object}{What to compose the new \code{Layer} instance with. Typically a
Sequential model or a Tensor (e.g., as returned by \code{layer_input()}).
The return value depends on \code{object}. If \code{object} is:
\itemize{
\item missing or \code{NULL}, the \code{Layer} instance is returned.
\item a \code{Sequential} model, the model with an additional layer is returned.
\item a Tensor, the output tensor from \code{layer_instance(object)} is returned.
}}

\item{units}{Positive integer, dimensionality of the output space.}

\item{activation}{Name of activation function to use. If you don't specify
anything, no activation is applied (ie. "linear" activation: a(x) = x).}

\item{return_gate}{Logical - return gate values. Default: FALSE}
}
\description{
In such form introduced in [Language modeling with gated convolutional networks](https://arxiv.org/abs/1612.08083)
by Dauphin et al., when it was used in sequence processing tasks and compared with
gating mechanism used in LSTM layers. In the context of time series processing explicitly proposed in [Temporal Fusion Transformer](https://arxiv.org/pdf/1912.09363.pdf).
}
\details{
Computed according to the equations:

\eqn{projection = X \cdot W + b}

\eqn{gate = \sigma(X \cdot V + c)}

\eqn{output = projection \odot gate}
}
\examples{
library(keras)

# ================================================================
#             SEQUENTIAL MODEL, NO GATE VALUES RETURNED
# ================================================================

model <-
  keras_model_sequential() \%>\%
  layer_glu(10, input_shape = 30)

model \%>\%
   compile(optimizer = "adam", loss = "mse")

model

output <- model(matrix(1, 32, 30))
dim(output)
output[1,]

# ================================================================
#                     WITH GATE VALUES RETURNED
# ================================================================

inp  <- layer_input(30)
out  <- layer_glu(units = 10, return_gate = TRUE)(inp)

model <- keras_model(inp, out)

model

model \%>\%
   compile(optimizer = "adam", loss = "mse")

c(values, gate) \%<-\% model(matrix(1, 32, 30))
dim(values)
dim(gate)

values[1,]
gate[1,]


}
\references{
Dauphin, Yann N., et al. (2017). [Language modeling with gated convolutional networks.](https://arxiv.org/abs/1612.08083)
International conference on machine learning. PMLR

[Implementation PyTorch](https://github.com/jdb78/pytorch-forecasting/blob/268121aa9aa732558beefb6d9f95feff955ad08b/pytorch_forecasting/models/temporal_fusion_transformer/sub_modules.py#L71)
https://github.com/PlaytikaResearch/tft-torch/blob/9eee6db42b8ec6b6a586e8852e3af6e2d6b18035/tft_torch/tft.py#L11)
}
