% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/layer-grn.R
\name{layer_grn}
\alias{layer_grn}
\title{Gated Residual Network block}
\usage{
layer_grn(
  object,
  units,
  output_size = units,
  dropout_rate = NULL,
  use_context = FALSE,
  return_gate = FALSE,
  ...
)
}
\arguments{
\item{object}{What to compose the new \code{Layer} instance with. Typically a
Sequential model or a Tensor (e.g., as returned by \code{layer_input()}).
The return value depends on \code{object}. If \code{object} is:
\itemize{
\item missing or \code{NULL}, the \code{Layer} instance is returned.
\item a \code{Sequential} model, the model with an additional layer is returned.
\item a Tensor, the output tensor from \code{layer_instance(object)} is returned.
}}

\item{units}{Positive integer, dimensionality of the output space.}

\item{output_size}{Output size.}

\item{use_context}{Use additional (static) context. If TRUE, an additional layer
is created to handle context input.}

\item{return_gate}{Logical - return gate values. Default: FALSE}
}
\description{
GRN is one of the elements the TFT model is composed of.
The expected benefit from applying such value is a better ability
of switching between linear and non-linear processing.
}
\details{
Its output is computed as:
\deqn{GRN(a,c) = LayerNorm(a + GLU({\eta}_1))}
\deqn{{\eta}_1 = W_1\eta_2 + b_1}
\deqn{\eta_2 = ELU(W_2a + W_3c + b_2)}

\figure{img/grn.png}
}
\examples{
library(keras)

# ================================================================
#             SEQUENTIAL MODEL, NO GATE VALUES RETURNED
# ================================================================

model <-
  keras_model_sequential() \%>\%
  layer_grn(10, input_shape = 30)

model

output <- model(matrix(1, 32, 30))
dim(output)
output[1,]

#'================================================================
#            WITH GATE VALUES AND ADDITIONAL CONTEXT
# ================================================================

inp  <- layer_input(c(28, 5))
ctx  <- layer_input(10)
out  <- layer_grn(
            units = 10,
            return_gate = TRUE,
            use_context = TRUE
         )(inp, context = ctx)

model <- keras_model(list(inp, ctx), out)

model

arr_1 <- array(1, dim = c(1, 28, 5))
arr_2 <- array(1, dim = c(1, 10))

c(values, gate) \%<-\% model(list(arr_1, arr_2))
dim(values)
dim(gate)

values[1,]
gate[1,]

}
